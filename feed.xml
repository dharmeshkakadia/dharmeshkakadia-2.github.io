<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dharmesh Kakadia</title>
    <description>Curious</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Internals of Spark Parser</title>
        <description>&lt;p&gt;In this post we will try to demystify details about Spark Parser and how we can implement a very simple language with the use of same parser toolkit that Spark uses.&lt;/p&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt; is a widely used analytics and machine learning engine, which you have probably heard of. You can use Spark with various languages - Scala, Java, Python - to perform a wide variety of tasks - streaming, ETL, SQL, ML or graph computations. Spark SQL/dataframe is one of the most popular ways to interact with Spark. Spark SQL provides SQL syntax and SQL like API to build complex computation graphs. Spark SQL relies on a common compiler framework to translate the high level SQL code into executable low level code. Spark Catalyst is the name of that compiler framework.&lt;/p&gt;

&lt;h3 id=&quot;catalyst-architecture&quot;&gt;Catalyst Architecture&lt;/h3&gt;

&lt;p&gt;Following image describes various steps and components of Spark Catalyst. The image is taken from &lt;a href=&quot;https://databricks.com/glossary/catalyst-optimizer&quot;&gt;databricks&lt;/a&gt;
&lt;img src=&quot;/images/spark-arch.png&quot; alt=&quot;spark-arch.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Like any compiler, Spark Catalyst compiler has a various modules for different phases of compilation process. In this post we will focus more on parser part of the Catalyst and will also write an example program that parses simple string into well defined tokens.&lt;/p&gt;

&lt;h3 id=&quot;grammar-and-parsers&quot;&gt;Grammar and parsers&lt;/h3&gt;

&lt;p&gt;Grammar + Parser helps in answering the following question:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Is given statement complaint to the rules of the language?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select * from sample&lt;/code&gt; a valid Spark statement or not?&lt;/p&gt;

&lt;h3 id=&quot;why-understand-parser&quot;&gt;Why understand parser&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Understand will (or why is) the given statement giving error on parsing?&lt;/li&gt;
  &lt;li&gt;Is this a keyword in Spark or not?&lt;/li&gt;
  &lt;li&gt;Add new feature (say merge statement support)&lt;/li&gt;
  &lt;li&gt;Build new tools, say our own editor for Spark…&lt;/li&gt;
  &lt;li&gt;Generating automated tests from the grammar&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spark-grammar&quot;&gt;Spark grammar&lt;/h3&gt;

&lt;p&gt;Spark grammar is LL. &lt;strong&gt;Spark parser first tries to parse it using SLL mode (Strong LL), which is faster. If that fails, it will try to parse it as LL.&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LL&lt;/code&gt; stands for Left to right parsing, deriving leftmost derivation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A grammar G = ( N, T, P, S ) is said to be strong LL(k) for some fixed natural number k if for all nonterminals A, and for any two distinct A-productions in the grammar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The strong LL(k) grammars are a subset of the LL(k) grammars that can be parsed without knowledge of the left-context of the parse. That is, each parsing decision is based only on the next k tokens of the input for the current nonterminal that is being expanded. Or in other words, parsers that ignore the parser call stack for prediction are called Strong LL (SLL) parsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;antlr&quot;&gt;ANTLR&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.antlr.org/&quot;&gt;ANTLR&lt;/a&gt; stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANother Tool for Language Recognition&lt;/code&gt;. Its a toolkit for building languages and parsers. ANTLR can be used as a parser generator for reading, processing, executing, or translating structured text. ANTLR generates a parser that can build and walk parse trees. Its used widely by many big data languages (Groovy, Cassandra, Hive, …)&lt;/p&gt;

&lt;h4 id=&quot;antlr-operators&quot;&gt;ANTLR operators&lt;/h4&gt;

&lt;p&gt;ANTLR has following operators that we can use to define structure of any language.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| alternatives
. any character
? repeated zero or one time
+ repeated one or more times
* repeated zero or more times
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;simple-antlr-end-to-end-example&quot;&gt;Simple ANTLR end to end example&lt;/h3&gt;

&lt;p&gt;Now we will build a very simple end-to-end example, that recognizes any string starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello&lt;/code&gt; and extracts the alphabetic word following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello&lt;/code&gt;. So, for string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; it would extract &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;World&lt;/code&gt;, string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello Dharmesh&lt;/code&gt; it would identify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dharmesh&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;First we need to define our grammer formally. Following is the formal definition of our &lt;a href=&quot;https://github.com/dharmeshkakadia/hello-antlr/blob/master/src/main/antlr4/Hello.g4&quot;&gt;grammer&lt;/a&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello&lt;/code&gt;, where we define word we want to extract as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ID&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a-z]+&lt;/code&gt; which means any character(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a-z]&lt;/code&gt;) 1 or more time(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;). We also define whitespace as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS&lt;/code&gt; and finally define the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; as string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Hello'&lt;/code&gt; followed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ID&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-antlr-java&quot;&gt;grammar Hello;
msg   : 'Hello' ID;
ID  : [a-z]+ ;
WS  : [ \t\r\n]+ -&amp;gt; skip ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we have to implement &lt;a href=&quot;https://github.com/dharmeshkakadia/hello-antlr/blob/master/src/main/java/HelloVister.java&quot;&gt;Visiter interface&lt;/a&gt; to decide what to do when we encounter/parse/traverse a node in the grammar. For our simple example, we are just going to print the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ID&lt;/code&gt; value as the parser enters and exits the node while parsing the input string.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloVister&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloBaseListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enterMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HelloParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MsgContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Entering Msg : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exitMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HelloParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MsgContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exiting Msg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we have to initialize the lexer, parser etc. and start the parsing in our &lt;a href=&quot;https://github.com/dharmeshkakadia/hello-antlr/blob/master/src/main/java/Hello.java&quot;&gt;main program&lt;/a&gt; after passing the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.antlr.v4.runtime.ANTLRInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.antlr.v4.runtime.CommonTokenStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.antlr.v4.runtime.tree.ParseTreeWalker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;HelloLexer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloLexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ANTLRInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;HelloParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommonTokenStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ParseTreeWalker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParseTreeWalker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;visiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloVister&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dharmeshkakadia/hello-antlr&quot;&gt;Our example code&lt;/a&gt; uses &lt;a href=&quot;https://www.antlr.org/api/maven-plugin/latest/&quot;&gt;ANTLR maven plugin&lt;/a&gt;, which takes care of generating the code for the grammar.&lt;/p&gt;

&lt;p&gt;To compile the project and generate parser code,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn compile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To run the program that passes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; to our parser,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn exec:java -q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which would print&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Entering Msg : world
Exiting Msg

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thats it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;P.S. This post is made from the the notebook that I used at for our internal Microsoft &lt;a href=&quot;https://github.com/dharmeshkakadia/spark-internals&quot;&gt;presentation&lt;/a&gt; and had been sitting in my TODO for quite some time, but was not published here on blog. The Corona virus lockdown has allowed me to finally get to this. Stay safe everyone !!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
        <link>/spark-parser-internals/</link>
        <guid isPermaLink="true">/spark-parser-internals/</guid>
      </item>
    
      <item>
        <title>Verifying links with Github actions &amp; Awesome Bot</title>
        <description>&lt;p&gt;Recently I started using &lt;a href=&quot;https://github.com/features/actions&quot;&gt;github action&lt;/a&gt; to automate link checking in all of &lt;a href=&quot;https://github.com/dharmeshkakadia?utf8=%E2%9C%93&amp;amp;tab=repositories&amp;amp;q=awesome&amp;amp;type=&amp;amp;language=&quot;&gt;my awesome repos&lt;/a&gt;. I have been using &lt;a href=&quot;https://github.com/dkhamsing/awesome_bot&quot;&gt;awesome_bot&lt;/a&gt; to validate links and checks for duplicates, with &lt;a href=&quot;https://travis-ci.org/&quot;&gt;travis&lt;/a&gt; since past 2+ years. I decided to give github actions try with this very simple automation. Github action is very rich and can automate a lot of chores for developers. There are number of existing actions available in the &lt;a href=&quot;https://github.com/marketplace?type=actions&quot;&gt;github market place&lt;/a&gt;. However, I couldn’t find one that allows me to verify links in markdown. So lets build one from &lt;a href=&quot;https://github.com/dharmeshkakadia/awesome-mesos/pull/45&quot;&gt;scratch&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Here is my github action config : &lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker://dkhamsing/awesome_bot:latest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--allow-redirect /github/workspace/README.md&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can put this under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/main.yaml&lt;/code&gt; in your repo and voila!&lt;/p&gt;

&lt;p&gt;Now let’s go through the file to understand whats going on here. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; is just a display name used. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; specifies when this workflow runs. There are number of &lt;a href=&quot;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows&quot;&gt;options available&lt;/a&gt;, but here we just need to run it on every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt;. We can filter which branches this triggers work etc. However we don’t need them for this. Just know that &lt;a href=&quot;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions&quot;&gt;Github actions syntax&lt;/a&gt; is very flexible.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs&lt;/code&gt; is where the meat of the workflow is. Here you can specify what you actually want to do as part of this workflow. In our workflow we only have job with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;job_id&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt;. If we specify more jobs it by default runs in parallel, but we can create dependency chains using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs.&amp;lt;job_id&amp;gt;.needs&lt;/code&gt; tag. We are specifying that the job should run on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu-latest&lt;/code&gt; agent. We need to use ubuntu agent when running a docker image with github action.&lt;/p&gt;

&lt;p&gt;Now a job consists of a multiple tasks called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt;. Here we are using two steps. First a github provided action called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions/checkout@v1&lt;/code&gt; to checkout the code. Second we are specifying a docker action with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dkhamsing/awesome_bot:latest&lt;/code&gt; docker image. This is the docker image recommended by &lt;a href=&quot;https://github.com/dkhamsing/awesome_bot#docker-examples&quot;&gt;awesome_bot repo&lt;/a&gt;. We are specifying here that awesome_bot should respect redirects and specifying the file path for our markdown file. Note that the checkout code is mapped as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/github/workspace/&lt;/code&gt; while running with docker. This bit of information wasn’t easy to find out and took few iteration to get right. That’s it!&lt;/p&gt;

&lt;p&gt;You are all set now. All the PRs will now automatically run awesome bot to check the links and validation results will be visible on the PR page itself! You can look at &lt;a href=&quot;https://github.com/dharmeshkakadia/awesome-mesos/pull/46&quot;&gt;some pull requests&lt;/a&gt; if you want example - click on green checkmark on right and then on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Details&lt;/code&gt; next to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CI/build (push)&lt;/code&gt; and you will see the full logs of validation under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions&lt;/code&gt; tab in the repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/github-actions-logs.png&quot; alt=&quot;Github actions logs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Happy hacking and happy holidays everyone !&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
        <link>/github-actions-awesome-bot/</link>
        <guid isPermaLink="true">/github-actions-awesome-bot/</guid>
      </item>
    
      <item>
        <title>Versatile RStudio development environment on Kubernetes</title>
        <description>&lt;p&gt;R is very versatile language for data analysis and widely used for data science and exploration alongside python. &lt;a href=&quot;https://www.rstudio.com/&quot;&gt;RStudio&lt;/a&gt; is a great IDE for exploring data using R. RStudio has a lot of powerful &lt;a href=&quot;https://www.rstudio.com/products/rstudio/features/&quot;&gt;features&lt;/a&gt; for writing and debugging R code, but while using it on large data, it can be challenging due to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scalability&lt;/li&gt;
  &lt;li&gt;Privacy and security of data&lt;/li&gt;
  &lt;li&gt;Ability to connect R workflows with other tools (Spark, Tensorflow etc.)&lt;/li&gt;
  &lt;li&gt;Backing up the R code automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We solve these challenges by running &lt;a href=&quot;#deploying-rstudio-on-k8s&quot;&gt;RStudio on Kubernetes&lt;/a&gt; and using &lt;a href=&quot;#blobfuse-for-remote-data-access&quot;&gt;Blobfuse&lt;/a&gt; for remote data access.&lt;/p&gt;

&lt;h2 id=&quot;deploying-rstudio-on-k8s&quot;&gt;Deploying RStudio on k8s&lt;/h2&gt;

&lt;p&gt;First, we will see how we can deploy RStudio using &lt;a href=&quot;https://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt;, Deploying RStudio on Kubernetes has many advantages :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allows exploration tools like RStudio also to be in controlled and secure environments.&lt;/li&gt;
  &lt;li&gt;With combinations of blobfuse, makes sure the data never leaves the compliance boundary.&lt;/li&gt;
  &lt;li&gt;Also makes RStudio available in web browser from anywhere.&lt;/li&gt;
  &lt;li&gt;RStudio, running on cluster can have a lot more resources that can be used by for exploration by R.&lt;/li&gt;
  &lt;li&gt;With cache interval, you can automatically cache the remote data for longer time as well, for better performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will create a Kubernetes &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot;&gt;deployment&lt;/a&gt; for RStudio. The following YAML describes our RStudio deployment. Dont worry if you don’t all the fields in the YAML, you don’t need to understand all the kubernetes concepts for now.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rocker/rstudio&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Always&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8787&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/bash&quot;&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-c&quot;&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;args &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rstudio-server&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;infinity'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have put these configuration files on github here &lt;a href=&quot;https://github.com/dharmeshkakadia/rstudio-k8s&quot;&gt;dharmeshkakadia/rstudio-k8s&lt;/a&gt;. You can deploy the above YAML directly from github link with:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f https://raw.githubusercontent.com/dharmeshkakadia/rstudio-k8s/master/rstudio.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above deployment doesn’t assign public end point to your RStudio deployment and you can access via local port-forwarding:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl port-forward deploy/rstudio 8787:8787
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! Now you are ready to use RStudio. Go to &lt;a href=&quot;http://localhost:8787&quot;&gt;http://localhost:8787&lt;/a&gt; and use username and password as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rstudio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rstudio-k8s.png&quot; alt=&quot;Rstudio&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;blobfuse-for-remote-data-access&quot;&gt;Blobfuse for remote data access&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Azure/azure-storage-fuse&quot;&gt;Blobfuse&lt;/a&gt; allows access to remote blob storage data as if it was part of local file system. This makes it possible to work with many packages that doesn’t yet work with remote storage natively. This also makes it simple for developers to be hidden from operational aspect of how the data is managed. We use &lt;a href=&quot;https://github.com/Azure/kubernetes-volume-drivers/tree/master/flexvolume/blobfuse&quot;&gt;blobfuse kubernetes volume drivers&lt;/a&gt; to integrate blobfuse with Kubernetes. With this setup, we can allows access to data on Azure Blob Storage as as local files from with Kubernetes constructs like pods. You need to install blobfuse on the cluster, by following &lt;a href=&quot;https://github.com/Azure/kubernetes-volume-drivers/tree/master/flexvolume/blobfuse&quot;&gt;instructions&lt;/a&gt;. Note that using blobfuse is not required to use RStudio Kubernetes, but only required for integration with Azure Storage.&lt;/p&gt;

&lt;p&gt;You will need to create a &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;Kubernetes Secret&lt;/a&gt; that allows access to the given storage account. You can use the command similar to the below, replacing your account name and storage key. Note that in production environment, this should not be done manually, but secret management solutions like &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/key-vault/&quot;&gt;Azure Key Vault&lt;/a&gt; with your CI/CD pipelines.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create secret generic blofuse-datasecret --from-literal accountname=storage-account-name --from-literal accountkey=&quot;fJg4..0A==&quot; --type=&quot;azure/blobfuse&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the full YAML with volume mounts sections addded. We are instructing Kubernetes to use the secret we just created (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blobfuse-datasecret&lt;/code&gt;) and mount &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datacontainer-name&lt;/code&gt; from the storage account at location &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/&lt;/code&gt; in the container. Of course you should change the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datacontainer-name&lt;/code&gt; with the name of the storage container you want to access.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rstudio&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rocker/rstudio&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Always&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8787&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/bash&quot;&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-c&quot;&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;args &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rstudio-server&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;infinity'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flexVolume&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;azure/blobfuse&quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secretRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;blofuse-datasecret&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datacontainer-name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can deploy the above YAML with:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f rstudio-blobfuse.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it ! Now when using RStudio, you can read files under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data&lt;/code&gt; as with normal file APIs and use the remote data as if they were local files. We can use the same mechanism to backup R code from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local&lt;/code&gt; folder to Azure Blob. Also, you since you can have multiple volumes mounted, you can easily use conventions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/userdata&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/researchdata&lt;/code&gt; and so on to have &lt;em&gt;all&lt;/em&gt; of various datasets available to you during exploration.&lt;/p&gt;

&lt;p&gt;There are many more possibilities, by integrating data frameworks and Kubernetes. For example, you can use similar deployment for deploying your &lt;a href=&quot;https://shiny.rstudio.com/&quot;&gt;Shiny&lt;/a&gt; apps on kubernetes, which will auto scale based on your traffic or load. You can use also deploy R ETL scripts as Kubernetes &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/&quot;&gt;Jobs&lt;/a&gt; or &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/&quot;&gt;CronJobs&lt;/a&gt; and get fault tolerance alerts etc for free. We use such Kubernetes constructs across our entire data/AI stack with Spark, Tensorflow, Jupyter etc. and had a lot of success with it.&lt;/p&gt;

&lt;p&gt;Have fun data hacking !&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
        <link>/rstudio-k8s/</link>
        <guid isPermaLink="true">/rstudio-k8s/</guid>
      </item>
    
      <item>
        <title>MXNet tools in docker</title>
        <description>&lt;p&gt;How to convert &lt;a href=&quot;https://github.com/apache/incubator-mxnet/tree/master/tools/coreml&quot;&gt;MXNet model to Apple CoreML&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v &quot;$PWD&quot;:/data --rm -it dharmeshkakadia/mxnet-coreml-tools-docker python mxnet_coreml_converter.py 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, if you want to convert Squeezenet model to coreml, to use with iOS.
Run the following from the a directory containing Squeezenet model files (&lt;a href=&quot;http://data.mxnet.io/models/imagenet/squeezenet/squeezenet_v1.1-0000.params&quot;&gt;Params&lt;/a&gt;, &lt;a href=&quot;http://data.mxnet.io/models/imagenet/squeezenet/squeezenet_v1.1-symbol.json&quot;&gt;symbols&lt;/a&gt;, &lt;a href=&quot;http://data.mxnet.io/models/imagenet/synset.txt&quot;&gt;labels&lt;/a&gt;) and will generate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;squeezenetv11.mlmodel&lt;/code&gt; in the current directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v &quot;$PWD&quot;:/data --rm -it dharmeshkakadia/mxnet-coreml-tools-docker python mxnet_coreml_converter.py --model-prefix='/data/squeezenet_v1.1' --epoch=0 --input-shape='{&quot;data&quot;:&quot;3,227,227&quot;}' --mode=classifier --pre-processing-arguments='{&quot;image_input_names&quot;:&quot;data&quot;}' --class-labels /data/synset.txt --output-file=&quot;/data/squeezenetv11.mlmodel&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; is located on &lt;a href=&quot;https://github.com/dharmeshkakadia/mxnet-coreml-tools-docker&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
        <link>/mxnet-tools-docker/</link>
        <guid isPermaLink="true">/mxnet-tools-docker/</guid>
      </item>
    
      <item>
        <title>Review - Are Ideas Getting Harder to Find?</title>
        <description>&lt;p&gt;This is a review of a recent paper &lt;a href=&quot;https://web.stanford.edu/~chadj/IdeaPF.pdf&quot;&gt;Are Ideas Getting Harder to Find?&lt;/a&gt; by Charles I. Jones. &lt;a href=&quot;https://web.stanford.edu/~chadj/slides-ideas.pdf&quot;&gt;Slides&lt;/a&gt; are also available.&lt;/p&gt;

&lt;p&gt;The central content of the paper is answering the question with the following formula :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Economic growth = Research productivity × Number of researchers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The paper presents evidence and arguments that even the economic growth has been relatively stable over the years, there is a clear downwards trend in the research productivity. This is compensated by more and more people getting into research. Here is a graph from paper showing those two trends:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ideas-1.png&quot; alt=&quot;productivity-decline.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea machine analogy is great - it requires double the input ust to keep the same output.How you define research productivity is similar to normal definition of productivity - how many new ideas are generated per researcher.&lt;/p&gt;

&lt;p&gt;The paper than on goes an applies this theory and formulation to number of settings:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Moore’s law example.&lt;/li&gt;
  &lt;li&gt;Agricultural innovation example - seed yield of Corn, Soybeans, Cotton, Wheat.&lt;/li&gt;
  &lt;li&gt;Medicine example - new drugs approved by FDA. (I am not sure this is the best metric). They also look at life expectancy and cancer research data from spending and effect point of view.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can also use it in predictive form :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have to double our research effort every decade just to keep up with declining research productivity!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The thing I am not sure the model incorporates well is that many of the research ideas are non-linear. By that I mean it takes years of foundational work that will be suddenly useful in a totally new area, that &lt;a href=&quot;https://www.ideatovalue.com/inno/nickskillicorn/2016/09/10-famous-inventions-culmination-peoples-work/&quot;&gt;the original research never considered&lt;/a&gt;. That to me is an essential part of research.&lt;/p&gt;

&lt;p&gt;So, the authors present strong evidence that research productivity is slowing down.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We have to double research effort every 13 years to maintain constant growth.”, what the author calls Red Queen problem - we have to run faster and faster to stay in the same place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The outlook doesn’t look good. The slow research growth has a direct impact on economic growth. One can argue that some of its effect are already being across the world.&lt;/p&gt;

&lt;p&gt;In general, measuring research productivity is a hard challenge. Having spent couple of years at Microsoft Research, I can relate to how difficult it is - both objectively and personally. During my time at MSR, once we had a long discussion about if ideas are actually getting harder to find. It started with someone mentioning that he wished he had born much earlier, that way there was so much to invent and so many low hanging fruit. I was on the other side and told him that thanks to him being born late, he has access to so many tools at his disposal in his research. Sort of like having a ladder, which makes fruits “low-hanging”. He wasn’t convinced. So, when I saw this paper from AMA by &lt;a href=&quot;https://twitter.com/patrickc&quot;&gt;Patrick Collison&lt;/a&gt;, I was intrigued  to read it. This was also my foray into reading things that I don’t understand directly or have a deep background. I felt I really didn’t get much from reading this, but I will continue to explore more.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
        <link>/ideas-hard/</link>
        <guid isPermaLink="true">/ideas-hard/</guid>
      </item>
    
      <item>
        <title>Automate SQL server data pipelines with Kubernetes</title>
        <description>&lt;p&gt;Kubernetes provides a great way to run modern infrastructure. SQL server is a widely deployed database. When you combine these two, you get a robust way of running a data pipeline using a modern platform.&lt;/p&gt;

&lt;p&gt;Data pipelines are large part of all data infrastructure. The need to move data between different systems, is almost universal and tools/process to achieve this is generally referred to as a data pipeline. In this post we will see how we can leverage &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/&quot;&gt;Kubernetes jobs API&lt;/a&gt; to build and run data pipelines. This is a great way to integrate data pipelines into CI/CD practices too.&lt;/p&gt;

&lt;p&gt;Following steps will create an example SQL pipeline and run it against SQL server using Kubernetes. We will be running a very simple query to list all the tables.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Lets define our job in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql-k8s-job.yaml&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;batch/v1&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Job&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqljob&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sqljobcontainer&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;microsoft/mssql-tools&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/opt/mssql-tools/bin/sqlcmd&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-S&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysqlserver.database.windows.net&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-d&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mydatabase&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-U&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;User&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-P&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PassWord&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-I&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-Q&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sys.tables&quot;&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;restartPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Here, we are specifying that this is a job definition(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kind: Job&lt;/code&gt;) with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqljob&lt;/code&gt;. The spec part is similar to other container specifications. We are specifying it to create a container with a name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqljobcontainer&lt;/code&gt; with the image &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;microsoft/mssql-tools&lt;/code&gt;. This image has all MSSQL tools installed to connect to a remote MSSQL instance. We are also specifying that it should run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlcmd&lt;/code&gt; command with the specified arguments, including server, database, password and query when it starts the container. Note that, I am specifying password in the job definition file here just for simplicity, you should use &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;kubernetes secrets&lt;/a&gt; when doing anything serious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lets run it. You can run it locally using &lt;a href=&quot;https://kubernetes.io/docs/getting-started-guides/minikube/&quot;&gt;minikube&lt;/a&gt; or on cloud.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl create -f sql-k8s-job.yaml
    
 job &quot;sqljob&quot; created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;You can see the details on the job.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl describe jobs/sqljob

 Name:           sqljob
 Namespace:      default
 Selector:       controller-uid=85530e4e-2eef-11e8-9e3f-92f68014defe
 Labels:         controller-uid=85530e4e-2eef-11e8-9e3f-92f68014defe
                 job-name=sqljob
 Annotations:    &amp;lt;none&amp;gt;
 Parallelism:    1
 Completions:    1
 Start Time:     Fri, 23 Mar 2018 16:11:30 -0700
 Pods Statuses:  1 Running / 0 Succeeded / 2 Failed
 Pod Template:
 Labels:  controller-uid=85530e4e-2eef-11e8-9e3f-92f68014defe
         job-name=sqljob
 Containers:
 sqljobcontainer:
     Image:  microsoft/mssql-tools
     Port:   &amp;lt;none&amp;gt;
     Command:
     /opt/mssql-tools/bin/sqlcmd
     Args:
     -S
     mysqlserver.database.windows.net
     -d
     mydatabase
     -U
     User
     -P
     PassWord
     -I
     -Q
     SELECT name FROM sys.tables
     Environment:  &amp;lt;none&amp;gt;
     Mounts:       &amp;lt;none&amp;gt;
 Volumes:        &amp;lt;none&amp;gt;
 Events:
 Type    Reason            Age   From            Message
 ----    ------            ----  ----            -------
 Normal  SuccessfulCreate  30s   job-controller  Created pod: sqljob-qsdtg
 Normal  SuccessfulCreate  20s   job-controller  Created pod: sqljob-pws2m
 Normal  SuccessfulCreate  10s   job-controller  Created pod: sqljob-lb2dz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You can also see the job on the kubernetes dashboard. You can open the kubernetes dashboard using&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; minikube dashboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You can see the job under jobs section in the dashboard.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/sql-k8s-job.png&quot; alt=&quot;sqljib-k8s-dashboard&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lets see the output from the job.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl logs jobs/sqljob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You should see the list of all the tables in your database.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally you can delete the job using&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl delete jobs/sqljob

 job &quot;sqljob&quot; deleted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now that you have are comfortable with this job, you can easily convert this into a recurring job. Kubernetes jobs support for &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/&quot;&gt;cron jobs&lt;/a&gt;. You can include the cron syntax schedule in the container spec to convert a job into a cron job. For example, by including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schedule: &quot;0 * * * *&quot;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec&lt;/code&gt; section of the job, your job will run every 1-hour. Crontab syntax is hard to remember and undertstand, but luckily you can just use &lt;a href=&quot;https://crontab.guru/&quot;&gt;crontab.guru&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thats it. Go build your pipeline !&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
        <link>/sql-k8s-jobs/</link>
        <guid isPermaLink="true">/sql-k8s-jobs/</guid>
      </item>
    
      <item>
        <title>Write a Presto query logging plugin</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://prestodb.io/&quot;&gt;Presto&lt;/a&gt; is a fast distributed SQL query engine for big data. I wrote a more &lt;a href=&quot;http://dharmeshkakadia.github.io/presto-hdinsight/&quot;&gt;introductory&lt;/a&gt; and up and running post a while back.&lt;/p&gt;

&lt;p&gt;Presto users frequently [&lt;a href=&quot;https://stackoverflow.com/questions/47286733/logging-all-presto-queries&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://groups.google.com/forum/#!topic/presto-users/9jV7iOfdqeY&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://groups.google.com/forum/#!topic/presto-users/zN2DFnzy5bs&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://groups.google.com/forum/#!topic/presto-users/i1aG5LO40SY&quot;&gt;4&lt;/a&gt;] want the ability to log various details regarding queries and execution information from Presto. This is very useful for operationalizing presto in any organization. Logging query details allows a team to understand the usage of Presto, provide operational analytics and identify on performance bottlenecks. If you want to know how to achieve this, read on. You can also use this guide to learn how to implement any presto plugin. All the &lt;a href=&quot;https://github.com/dharmeshkakadia/presto-event-logger&quot;&gt;code&lt;/a&gt; used in this post is available.&lt;/p&gt;

&lt;h2 id=&quot;event-listeners&quot;&gt;Event Listeners&lt;/h2&gt;

&lt;p&gt;One of the best thing about Presto’s design is clean abstractions. Event Listener is one such abstraction. Presto added Event Listener support some time back, similar to other engines. &lt;a href=&quot;https://prestodb.io/docs/current/develop/event-listener.html&quot;&gt;Presto Event Listener&lt;/a&gt; allows you to write custom functions that listens to events happening inside engine and react to it. Event listeners are invoked for following events in presto query workflow :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Query creation&lt;/li&gt;
  &lt;li&gt;Query completion&lt;/li&gt;
  &lt;li&gt;Split completion&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Couple of caveats regarding Event Listeners in Presto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In a given presto cluster, you can only register a single event listener plugin.&lt;/li&gt;
  &lt;li&gt;Each presto event listener is a presto plugin. So, it will behave like one - in terms of how is it registered and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, to crate a query logging presto plugin, at a high level, we will,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Implement an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventListener&lt;/code&gt; and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventListenerFactory&lt;/code&gt; interfaces from Presto.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure to package our classes and register the plugins so that Presto can find them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deploy the plugin to Presto.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If these names dont make sense right now, don’t worry. We will go through detailed step by step instructions below.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We will use &lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; for dependency management and packaging. Set it up and create an empty maven project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add Presto as dependency by adding the following into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project&lt;/code&gt; section of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.facebook.presto&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;presto-spi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.172&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;We will also use slf4j for logging the query details. Note that we used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logger&lt;/code&gt; interface for logging the queries because it provides maximal flexibility on choosing where/how to store logs. So lets add that as a dependency as well&lt;/p&gt;

    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;slf4j-log4j12&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.16&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Time to write code. We will start by creating &lt;a href=&quot;https://github.com/dharmeshkakadia/presto-event-logger/blob/master/src/main/java/QueryFileLoggerEventListener.java&quot;&gt;QueryFileLoggerEventListener&lt;/a&gt; class that implements Presto’ &lt;a href=&quot;https://github.com/prestodb/presto/blob/master/presto-spi/src/main/java/com/facebook/presto/spi/eventlistener/EventListener.java&quot;&gt;EventListener&lt;/a&gt; interface.&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueryFileLoggerEventListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryFileLoggerEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QueryFileLoggerEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;queryCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QueryCompletedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryCompletedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryCompletedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQueryId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;queryCompletedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQueryState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;queryCompletedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;queryCompletedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatistics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalRows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;queryCompletedEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatistics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Here we are logging query details(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueryId&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Query&lt;/code&gt;) and Statistics(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalRows&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalBytes&lt;/code&gt;) separating them via ` : ` in a single log line. Note that here for the space reason I am showing only few query details, event object contains a lot of other useful information. For example, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt; to determine if query failed or succeeded and log different details in each case. The code in the repo logs additional details.&lt;/p&gt;

    &lt;p&gt;Also, note that we have only implemented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queryCompleted()&lt;/code&gt; method from the EventListener interface. It provides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queryCreated()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splitCompleted()&lt;/code&gt; methods for query creation and split completion event notifications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now lets create a &lt;a href=&quot;https://github.com/dharmeshkakadia/presto-event-logger/blob/master/src/main/java/QueryFileLoggerEventListenerFactory.java&quot;&gt;QueryFileLoggerEventListenerFactory&lt;/a&gt; class that implements Presto’s &lt;a href=&quot;https://github.com/prestodb/presto/blob/master/presto-spi/src/main/java/com/facebook/presto/spi/eventlistener/EventListenerFactory.java&quot;&gt;EventListenerFactory&lt;/a&gt; interface.&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueryFileLoggerEventListenerFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;EventListenerFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;event-logger&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventListener&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QueryFileLoggerEventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Here we are creating a minimal implementation of the factory method that is just invoking our listener. If you need to perform any additional initialization, you can add it here. Also, note that we are naming our logging listener &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event-logger&lt;/code&gt;, which we will use later when configuring it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As noted previously, event listeners are registered as a plugin in Presto. So, lets create &lt;a href=&quot;https://github.com/dharmeshkakadia/presto-event-logger/blob/master/src/main/java/QueryFileLoggerPlugin.java&quot;&gt;QueryFileLoggerPlugin&lt;/a&gt; which implements Presto’s Plugin&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueryFileLoggerPlugin&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EventListenerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEventListenerFactories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nc&quot;&gt;EventListenerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listenerFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueryFileLoggerEventListenerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImmutableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listenerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Here we are again simply registering our factory as part of the plugin.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;/h2&gt;

&lt;p&gt;Now, that we have all the code, lets move to packaging it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Presto uses &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html&quot;&gt;Service Provider Interfaces(SPI)&lt;/a&gt; to extend Presto. SPI is widely used in Java world. Presto uses &lt;a href=&quot;https://prestodb.io/docs/current/develop/spi-overview.html&quot;&gt;SPI&lt;/a&gt; to load &lt;a href=&quot;https://prestodb.io/docs/current/develop/connectors.html&quot;&gt;Connector&lt;/a&gt;, &lt;a href=&quot;https://prestodb.io/docs/current/develop/functions.html&quot;&gt;Functions&lt;/a&gt;, &lt;a href=&quot;https://prestodb.io/docs/current/develop/types.html&quot;&gt;Types&lt;/a&gt; and &lt;a href=&quot;https://prestodb.io/docs/current/develop/system-access-control.html&quot;&gt;System Access Control&lt;/a&gt;. SPI are loaded via metadate files. We will create &lt;a href=&quot;https://github.com/dharmeshkakadia/presto-event-logger/blob/master/src/main/resources/META-INF/services/com.facebook.presto.spi.Plugin&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main/resources/META-INF/services/com.facebook.presto.spi.Plugin&lt;/code&gt;&lt;/a&gt; metadata file. The file should contain the class name for our plugin - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueryFileLoggerPlugin&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We will also add &lt;a href=&quot;https://github.com/dharmeshkakadia/presto-event-logger/blob/master/src/main/resources/log4j.properties&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log4j.properties&lt;/code&gt;&lt;/a&gt; file that specifies where to write our query logs. You should adopt this to your environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lets compile and package our code.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mvn package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;At this stage, we have our code ready to deploy to Presto.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First we will have to tell Presto to load our listener. We will create event-listener configuration file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;path-to-presto&amp;gt;/etc/event-listener.properties&lt;/code&gt;. This configuration file at-least should have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event-listener.name&lt;/code&gt; property whose value should match the string returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventListenerFactory.getName()&lt;/code&gt; - in out case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event-logger&lt;/code&gt;. The remaining properties will be passed as a map to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventListenerFactory.create()&lt;/code&gt; which can use for passing any additional information you want to your listener.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy our generated jar to the presto plugins directory.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;target/presto-event-logger&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jar &amp;lt;path-to-presto&amp;gt;/plugin/event-logger/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You should also copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slf4j-api-*.jar&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slf4j-log4j12-*.jar&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guava-*.jar&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log4j-*.jar&lt;/code&gt; or any additional dependencies that you have to the event-logger folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;path-to-presto&amp;gt;/plugin/event-logger/&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are all set. Start the presto server&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;path-to-presto&amp;gt;/bin/launcher start  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You should see the event listener registration in the Presto server logs. And you should also see your query logs as the queries are submitted to Presto.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it. We saw how to write a query logger plugin for presto. As noted above, &lt;a href=&quot;https://github.com/dharmeshkakadia/presto-event-logger&quot;&gt;complete code&lt;/a&gt; is available. Give it a try!&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
        <link>/presto-event-listener/</link>
        <guid isPermaLink="true">/presto-event-listener/</guid>
      </item>
    
      <item>
        <title>Analyzing Azure Storage Performance</title>
        <description>&lt;p&gt;I work on performance of Big data systems at &lt;a href=&quot;https://azure.microsoft.com/en-us/services/hdinsight/&quot;&gt;Azure HDInsight&lt;/a&gt; and as part of &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/hdinsight-interactive-query-performance-benchmarks-and-integration-with-power-bi-direct-query/&quot;&gt;benchmarking&lt;/a&gt;, many times I need to analyze the performance of the cloud storage. Performance of the storage system plays a very critical role in the performance of the cloud big data systems. Even though there are public benchmarks available for theses systems, its important to measure performance for your workload. In that spirit, we will see how to leverage storage logs for benchmarking your big data workload on &lt;a href=&quot;https://azure.microsoft.com/en-us/services/storage/&quot;&gt;Azure Storage Blob (aka WASB)&lt;/a&gt;. We will see how to enable storage perf logging, how to download and analyze the logs and also how to combine this anlysis with query engines like Spark and Hive.&lt;/p&gt;

&lt;h2 id=&quot;downloading-and-analyzing-wasb-logs&quot;&gt;Downloading and Analyzing WASB logs&lt;/h2&gt;

&lt;p&gt;Azure Storage provides &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/common/storage-analytics&quot;&gt;logs and metrics&lt;/a&gt; for all the requests. The logs are stored in the storage account in the following form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&amp;lt;accountname&amp;gt;.blob.core.windows.net/$logs/&amp;lt;service-name&amp;gt;/YYYY/MM/DD/hhmm/&amp;lt;counter&amp;gt;.log&lt;/code&gt;. Although, this format for logs is simple, it can be quite challenging to build tools and automatation around this format - especially if you want to be efficient. This was one of my motivation behind writing &lt;a href=&quot;https://github.com/dharmeshkakadia/azlogs&quot;&gt;azlogs&lt;/a&gt; - a tool for downloading logs for given timeperiod. I use it automatically &lt;a href=&quot;https://github.com/hdinsight/HivePerformanceAutomation/blob/master/bin/perfdatascripts/getStoreLatency.sh&quot;&gt;analyze latencies&lt;/a&gt; of WASB requests.&lt;/p&gt;

&lt;p&gt;Lets see how you can use azlogs to download the logs and anlayze them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enable azure storage logging by following the &lt;a href=&quot;https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/enabling-storage-logging-and-accessing-log-data&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Download the azlogs tool.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/dharmeshkakadia/azlogs &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;azlogs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Compile it using Maven.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mvn package assembly:single 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Download the logs for a given time range. You need to provide the storage account name and access key along with start and end time for which you want to logs for.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Usage: azlogs &amp;lt;AccountName&amp;gt; &amp;lt;AccountKey&amp;gt; &amp;lt;startDate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seconds since epoch&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; &amp;lt;endDate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;seconds since epoch&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;columns&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sorted&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;For example, to download the logs for storage account &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storage1&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1476132794&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1476132895&lt;/code&gt;, you can use the following command.&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; azlogs.jar storage1 &lt;span class=&quot;nv&quot;&gt;67t2Mw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1476132794&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1476132895&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;request_start_time,operation_type,end_to_end_latency_in_ms&quot;&lt;/span&gt; 2&amp;gt;debug_logs &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The above command will produce an output CSV file(delimited by ;) that you can use to analyze with your favorite data analysis tool. I like to use &lt;a href=&quot;https://csvkit.readthedocs.io/en/1.0.1/&quot;&gt;csvkit&lt;/a&gt; for working with csv files on command line. It allows you to write a sql query against a csv file. For example, here is how to calculate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avg&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; latencies (from both client and service side) and the counts for various operations on WASB from above output logs using csvkit.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; csvsql &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select operation_type, count(*), avg(end_to_end_latency_in_ms), min(end_to_end_latency_in_ms), max(end_to_end_latency_in_ms), avg(server_latency_in_ms), min(server_latency_in_ms),max(server_latency_in_ms) from output group by operation_type&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This would produce output similar to :&lt;/p&gt;

    &lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
    &lt;script src=&quot;https://gist.github.com/a3080a2759a0ecefb7a0d99943239ec8.js&quot;&gt; &lt;/script&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;analyzing-storage-performance-of-a-spark-or-hive-query&quot;&gt;Analyzing storage performance of a Spark or hive query&lt;/h2&gt;

&lt;p&gt;We can use the above technique to get the storage logs for a given spark or hive query/job. This is assuming the storage account is only being used by the given query. This is easily achievable in the benchmark or performance debugging scenarios.&lt;/p&gt;

&lt;p&gt;At a high level, the steps for measureing the storage performance for a given spark/hive query:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Record the start time
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;STARTTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%s&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Execute spark or hive job(s).
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; spark-sql &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select count(*) from hivesampletable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;or if you are using hive&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; hive &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select count(*) from hivesampletable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Note that, you can run arbitrary commands here that interact with storage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Record the end time.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;ENDTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%s&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Download the storage logs from start time to end time using the steps mentioned above. This logs will contain all the storage requests made during this time frame.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; azlogs.jar storage1 &lt;span class=&quot;nv&quot;&gt;67t2Mw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$STARTTIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ENDTIME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;request_start_time,operation_type,end_to_end_latency_in_ms&quot;&lt;/span&gt; 2&amp;gt;debug_logs &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Anlayze the storage logs stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the first section of this post, we saw how to calulate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avg&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; of storage request latecy. While these are useful statistical summaries, &lt;a href=&quot;https://en.wikipedia.org/wiki/Quartile&quot;&gt;quartiles&lt;/a&gt; provide a much more useful descriptive statstics, especially in case of latency numbers. In performance analysis, we care about 99th, 99.9th, 99.99th percentile latencies very often.&lt;/p&gt;

&lt;p&gt;We will now see how to calculate 99th percentile of storage requests. You can run the following command to generate 99th percentile latency numbers for different types of operations :&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;csvsql &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select operation_type,E2E99thP from (select end_to_end_latency_in_ms,operation_type from output order by end_to_end_latency_in_ms asc limit cast(0.99*(select count(end_to_end_latency_in_ms) from output)as int)) group by operation_type&quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/b6c1b29cd899f31020f6ddc8e130882c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;By changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.99&lt;/code&gt; to in above query to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.999&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.9999&lt;/code&gt;, we can calcualte 99.9th or 99.99th percentile latency. We can combine the above queries to get a better picture of the requests success rates and latencies.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-storage-performance-of-your-big-data-workload&quot;&gt;Analyzing storage performance of your big data workload&lt;/h2&gt;

&lt;p&gt;While measuring storage latencies for individual queries are useful for debugging query performance, if we want to get a more complete picture of storage and query engine performance on cloud, we should run industry standard benchmarks like &lt;a href=&quot;https://github.com/dharmeshkakadia/tpch-hdinsight&quot;&gt;tpch&lt;/a&gt; and &lt;a href=&quot;https://github.com/dharmeshkakadia/tpcds-hdinsight&quot;&gt;tpcds&lt;/a&gt; and see the storage reuqests numbers. With little more &lt;a href=&quot;https://github.com/hdinsight/HivePerformanceAutomation&quot;&gt;automation&lt;/a&gt;, we can generate the following summary of storage requests across different queries:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/7c2a3750298af7757ddde8714b84e3b5.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Remember, storage is just one part of the query engines performance, if we want to understand the query engine performance at a deeper level, we need to combine this with other resource performance data - namely network, CPU, memory. In the next post we will see how to achieve that. Till then go measure your storage performance!&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
        <link>/wasb-logging/</link>
        <guid isPermaLink="true">/wasb-logging/</guid>
      </item>
    
      <item>
        <title>OpenFaaS on Minikube</title>
        <description>&lt;p&gt;Minimal steps to run &lt;a href=&quot;https://github.com/openfaas&quot;&gt;serveless/functions-as-a-service platform&lt;/a&gt; on &lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;Minikube&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start minikube.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube start&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install helm, if you haven’t already.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install kubernetes-helm&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install openfass CLI.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install faas-cli&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new service account for Helm. We are calling it tiller.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; kubectl -n kube-system create sa tiller \
  &amp;amp;&amp;amp; kubectl create clusterrolebinding tiller \
  — clusterrole cluster-admin \
  — serviceaccount=kube-system:tiller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start helm.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm init --skip-refresh --upgrade --service-account tiller&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get openfass kubernetes integration.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/openfaas/faas-netes &amp;amp;&amp;amp; cd faas-netes&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install openfass on Kubernetes.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm upgrade — install --debug --reset-value --set async=false --set rbac=false openfaas openfaas/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;At this point you should see that kubernetes has deployed our serverless infrastructure. 			
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get pods&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; NAME                            READY     STATUS    RESTARTS   AGE
 alertmanager-2526763497-qxzwb   1/1       Running   0          43m
 faas-netesd-1969965387-mtfn3    1/1       Running   0          43m
 gateway-640487255-5k2xr         1/1       Running   0          43m
 hello-4272447001-lkxcs          1/1       Running   0          22m
 prometheus-3793543547-w13ln     1/1       Running   0          43m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You can also look at the the ui &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube service gateway-external&lt;/code&gt;
 &lt;img src=&quot;/images/openfaas.png&quot; alt=&quot;openfaas.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, that we have infrastructure, lets build and deploy a python hello world function.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faas-cli new --lang python hello&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This will create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.yml&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello/handler.py&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello/requirements.txt&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.yml&lt;/code&gt; describes the deployment (service name, image to be used etc.). You want to change the image from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your_docker_id&amp;gt;/hello&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; provider:
   name: faas
   gateway: http://localhost:8080
 functions:
   hello:
     lang: python
     handler: ./hello
     image: dharmeshkakadia/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello/handler.py&lt;/code&gt; has the code to handle request. In our case it just prints back the string.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The requirements file is empty since we don’t have any dependencies right now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lets build our code, docker image and push it to registry. We will use docker with Kubernetes for this purpose.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval $(minikube docker-env)&lt;/code&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker login&lt;/code&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faas-cli build -f hello.yml&lt;/code&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faas-cli push -f hello.yml&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deploy the hello function service.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faas-cli deploy -f hello.yml --gateway $(minikube service gateway-external  --url)&lt;/code&gt;
At this point you should be seeing the service is deployed&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Deploying: hello.
No existing function to remove
Deployed.
URL: http://192.168.64.4:31112/function/hello
202 Accepted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can confirm it in UI as well.
    &lt;img src=&quot;/images/hello-openfaas.png&quot; alt=&quot;hello-openfaas.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You are now ready to test the service. You can invoke it from UI, via REST api or through CLI.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo world | faas-cli invoke hello --gateway $(minikube service gateway-external  --url)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The UI will show the invocation count has changed. You can also confirm it through CLI.
&lt;img src=&quot;/images/hello-deployed-openfaas.png&quot; alt=&quot;hello-deployed-openfaas.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The Prometheus dashboard also has the metrics for the service. Here is the dashboard showing invocation count.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube service prometheus-external&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/prometheous-openfaas.png&quot; alt=&quot;prometheous-openfaas.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally you can remove the hello function with&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;faas-cli remove hello --gateway $(minikube service gateway-external  --url)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Thats it ! OpenFaaS looks a great platform. Give it a try !&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
        <link>/openfaas-kubernetes/</link>
        <guid isPermaLink="true">/openfaas-kubernetes/</guid>
      </item>
    
      <item>
        <title>Multi stage docker build for go</title>
        <description>&lt;p&gt;Support for multistage docker build has landed in Docker earlier this year. Multi stage builds simplify the image building and the genereated images are much smaller in the size. The code/instructions are available at &lt;a href=&quot;https://github.com/dharmeshkakadia/go-multi-stage-docker&quot;&gt;go-multi-stage-docker&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Here is our lovely go program that we want to run in the image:&lt;/p&gt;

    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Multistage Docker builds!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; that you can use:&lt;/p&gt;

    &lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;# gobase layer&lt;/span&gt;
 FROM golang:alpine AS go-base
 ADD . /src
 RUN cd /src &amp;amp;&amp;amp; go build -o hello

 &lt;span class=&quot;c&quot;&gt;# final layer&lt;/span&gt;
 FROM alpine
 COPY --from=go-base /src/hello /app/
 ENTRYPOINT /app/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Here we create two layers:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;go-base layer: Includes go runtime. We are mounting src directory in the image and compiling our go package(hello.go) and generating the output binary hello.&lt;/li&gt;
      &lt;li&gt;app layer: Extends the alpine image by copying our binary(/src/hello) from the go-base layer to /app/. It also defines entrypoint for the image as our binary(/app/hello)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lets build our image and name it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-multi-stage-docker&lt;/code&gt; :
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ docker build -f Dockerfile -t go-multi-stage-docker:latest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You can see the new image would be only few MBs in the size :&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ docker image ls go-multi-stage-docker

 REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
 go-multi-stage-docker   latest              5f037e697b51        4 minutes ago       5.52MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lets run our app/image&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ docker run --rm go-multi-stage-docker

 Hello Multistage Docker builds!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thats it !&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
        <link>/multistage-docker-go/</link>
        <guid isPermaLink="true">/multistage-docker-go/</guid>
      </item>
    
  </channel>
</rss>